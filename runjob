#!/usr/bin/python
# Cups backend to run CAE solvers
# This file should be mode 500 so it runs as root
# Carl Osterwisch, September 2012
#
# Part of "Abacups" - See also:
# /usr/share/cups/mime/runjob.types Mime type definition for filepath
# /usr/share/cups/model/runjob.ppd  Printer definition
# /usr/lib/cups/backend/runjob      Cups backend to run CAE solvers


from __future__ import print_function, with_statement
import os
import sys
import pwd, grp
import subprocess
from signal import signal, SIGTERM

# Output "device discovery" information on stdout:
if len(sys.argv) < 3:
    print('direct runjob: "runjob" "Job queue"'
          ' "MFG:Abacups;MDL:CAE solver queue;CMD:none;"')
    sys.exit(0)

# CUPS filter/backend arguments:
# $1 The job ID
# $2 The user printing the job
# $3 The job name/title
# $4 The number of copies
# $5 The options that were provided when the job was submitted
# $6 The file to print (blank for stdin)

# Set INPUTFILE to where the input comes from:
if len(sys.argv) < 7:
    jobFile = sys.stdin.readline().strip()
else:
    with open(sys.argv[6]) as f:
        jobFile = f.readline().strip()

# Switch to user
pw = pwd.getpwnam(sys.argv[2])
os.setgid(pw.pw_gid)
os.setgroups([g.gr_gid for g in grp.getgrall() if pw.pw_name in g.gr_mem])
os.setuid(pw.pw_uid)
os.environ['USER'] = pw.pw_name
os.environ['HOME'] = pw.pw_dir
os.umask(0o002)

job = None
def killjob(sig, frame):
    "Pass SIGTERM signal to all child processes in the process group"
    if job:
        os.killpg(job.pid, SIGTERM)
signal(SIGTERM, killjob) # assign handler for SIGTERM

# Run the command
try:
    with open(os.path.splitext(jobFile)[0] + '.log', 'w') as outfile:
        job = subprocess.Popen(jobFile,
            stdout = outfile,
            stderr = subprocess.PIPE,
            cwd = os.path.dirname(jobFile),
            preexec_fn = os.setsid)
        out, err = job.communicate() # wait for job to finish
        for line in err.splitlines():
            print('INFO:{0}'.format(line.decode()), file=sys.stderr)
except OSError as e:
    print('INFO:{0}\nINFO:{1}'.format(jobFile, e), file=sys.stderr)

sys.exit(0)
